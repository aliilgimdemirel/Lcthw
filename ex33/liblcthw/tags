	ex33_vim.vim	/^nnoremap  1 1gt$/;"	m
	ex33_vim.vim	/^nnoremap  2 2gt$/;"	m
	ex33_vim.vim	/^nnoremap  3 3gt$/;"	m
	ex33_vim.vim	/^nnoremap  4 4gt$/;"	m
	ex33_vim.vim	/^nnoremap  5 5gt$/;"	m
	ex33_vim.vim	/^nnoremap  w :w$/;"	m
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
,cmain	ex33_vim.vim	/^nnoremap ,cmain :-1read \/home\/demirel\/.vim\/.cfolder\/.skeleton.main.c$/;"	m
0	ex33_vim.vim	/^normal! 0$/;"	m
039|	ex33_vim.vim	/^normal! 039|$/;"	m
05|	ex33_vim.vim	/^normal! 05|$/;"	m
<Plug>NetrwBrowseX	ex33_vim.vim	/^nnoremap <silent> <Plug>NetrwBrowseX :call netrw#BrowseX(expand((exists("g:netrw_gx")? g:netrw_gx : '<cfile>')),netrw#CheckIfRemote())$/;"	m
<Plug>NetrwBrowseXVis	ex33_vim.vim	/^vnoremap <silent> <Plug>NetrwBrowseXVis :call netrw#BrowseXVis()$/;"	m
CFLAGS	Makefile	/^CFLAGS=-g -O2 -Wall -Wextra -Isrc -rdynamic -DNDEBUG $(OPTFLAGS)$/;"	m
CFLAGS	Makefile	/^dev: CFLAGS=-g -Wall -Isrc -Wall -Wextra $(OPTFLAGS)$/;"	m
Join_two_lists	src/lcthw/list.c	/^List *Join_two_lists(List* list1, List *list2)$/;"	f
LIBS	Makefile	/^LIBS=-ldl $(OPTLIBS)$/;"	m
LIST_FOREACH	src/lcthw/list.h	10;"	d
List	src/lcthw/list.h	/^typedef struct List {$/;"	s
List	src/lcthw/list.h	/^} List;$/;"	t	typeref:struct:List
ListNode	src/lcthw/list.h	/^typedef struct ListNode {$/;"	s
ListNode	src/lcthw/list.h	/^} ListNode;$/;"	t	typeref:struct:ListNode
List_clear	src/lcthw/list.c	/^void List_clear(List * list)$/;"	f
List_clear_destroy	src/lcthw/list.c	/^void List_clear_destroy(List * list)$/;"	f
List_count	src/lcthw/list.h	6;"	d
List_create	src/lcthw/list.c	/^List *List_create()$/;"	f
List_destroy	src/lcthw/list.c	/^void List_destroy(List * list)$/;"	f
List_first	src/lcthw/list.h	7;"	d
List_get_nth	src/lcthw/list.c	/^void *List_get_nth(List * list, int n)$/;"	f
List_insert_at_nth	src/lcthw/list.c	/^void List_insert_at_nth(List * list, int n, void *value)$/;"	f
List_last	src/lcthw/list.h	8;"	d
List_pop	src/lcthw/list.c	/^void *List_pop(List * list)$/;"	f
List_push	src/lcthw/list.c	/^void List_push(List * list, void *value)$/;"	f
List_remove	src/lcthw/list.c	/^void *List_remove(List * list, ListNode * node)$/;"	f
List_shift	src/lcthw/list.c	/^void *List_shift(List * list)$/;"	f
List_unshift	src/lcthw/list.c	/^void List_unshift(List * list, void *value)$/;"	f
NDEBUG	tests/minunit.h	1;"	d
NUM_VALUES	tests/list_algos_tests.c	9;"	d	file:
OBJECTS	Makefile	/^OBJECTS=$(patsubst %.c,%.o,$(SOURCES))$/;"	m
PREFIX	Makefile	/^PREFIX?=\/usr\/local # ? makes it an optional variable.$/;"	m
RUN_TESTS	tests/minunit.h	17;"	d
SOURCES	Makefile	/^SOURCES=$(wildcard src\/**\/*.c src\/*.c)$/;"	m
SO_TARGET	Makefile	/^SO_TARGET=$(patsubst %.a,%.so,$(TARGET))$/;"	m
SessionLoad	ex33_vim.vim	/^let SessionLoad = 1$/;"	v
Split_list_into_2_Lists_At_Position	src/lcthw/list.c	/^void Split_list_into_2_Lists_At_Position(List* list1, List *list2, List *list3, int split_index)$/;"	f
TARGET	Makefile	/^TARGET=build\/liblcthw.a$/;"	m
TESTS	Makefile	/^TESTS=$(patsubst %.c,%,$(TEST_SRC))$/;"	m
TEST_SRC	Makefile	/^TEST_SRC=$(wildcard tests\/*_tests.c)$/;"	m
__dbg_h__	src/lcthw/dbg.h	2;"	d
_minunit_h	tests/minunit.h	3;"	d
all_tests	tests/list_algos_tests.c	/^RUN_TESTS(all_tests);$/;"	v
all_tests	tests/list_algos_tests.c	/^char* all_tests()$/;"	f
all_tests	tests/list_tests.c	/^RUN_TESTS(all_tests);$/;"	v
all_tests	tests/list_tests.c	/^char *all_tests()$/;"	f
check	src/lcthw/dbg.h	29;"	d
check_debug	src/lcthw/dbg.h	37;"	d
check_mem	src/lcthw/dbg.h	35;"	d
clean_errno	src/lcthw/dbg.h	15;"	d
count	src/lcthw/list.h	/^	int count;$/;"	m	struct:List
debug	src/lcthw/dbg.h	11;"	d
debug	src/lcthw/dbg.h	9;"	d
first	src/lcthw/list.h	/^	ListNode *first;$/;"	m	struct:List
gx	ex33_vim.vim	/^nmap gx <Plug>NetrwBrowseX$/;"	m
gx	ex33_vim.vim	/^vmap gx <Plug>NetrwBrowseXVis$/;"	m
is_sorted	tests/list_algos_tests.c	/^int is_sorted(List * words)$/;"	f
last	src/lcthw/list.h	/^	ListNode *last;$/;"	m	struct:List
lcthw_List_h	src/lcthw/list.h	2;"	d
list	tests/list_tests.c	/^static List *list = NULL;$/;"	v	file:
list1	tests/list_tests.c	/^static List *list1 = NULL;$/;"	v	file:
list2	tests/list_tests.c	/^static List *list2 = NULL;$/;"	v	file:
list3	tests/list_tests.c	/^static List *list3 = NULL;$/;"	v	file:
log_err	src/lcthw/dbg.h	17;"	d
log_info	src/lcthw/dbg.h	25;"	d
log_warn	src/lcthw/dbg.h	21;"	d
mu_assert	tests/minunit.h	11;"	d
mu_run_test	tests/minunit.h	14;"	d
mu_suite_start	tests/minunit.h	9;"	d
next	src/lcthw/list.h	/^	struct ListNode *next;$/;"	m	struct:ListNode	typeref:struct:ListNode::ListNode
prev	src/lcthw/list.h	/^	struct ListNode *prev;$/;"	m	struct:ListNode	typeref:struct:ListNode::ListNode
s:cpo_save	ex33_vim.vim	/^let s:cpo_save=&cpo$/;"	v
s:l	ex33_vim.vim	/^let s:l = 1 - ((0 * winheight(0) + 29) \/ 58)$/;"	v
s:l	ex33_vim.vim	/^let s:l = 212 - ((30 * winheight(0) + 29) \/ 58)$/;"	v
s:l	ex33_vim.vim	/^let s:l = 23 - ((22 * winheight(0) + 28) \/ 57)$/;"	v
s:l	ex33_vim.vim	/^let s:l = 39 - ((33 * winheight(0) + 28) \/ 57)$/;"	v
s:so_save	ex33_vim.vim	/^let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0$/;"	v
s:sx	ex33_vim.vim	/^let s:sx = expand("<sfile>:p:r")."x.vim"$/;"	v
s:wipebuf	ex33_vim.vim	/^  let s:wipebuf = bufnr('%')$/;"	v
sentinel	src/lcthw/dbg.h	32;"	d
test1	tests/list_tests.c	/^char *test1 = "test1 data";$/;"	v
test2	tests/list_tests.c	/^char *test2 = "test2 data";$/;"	v
test3	tests/list_tests.c	/^char *test3 = "test3 data";$/;"	v
test_bubble_sort	tests/list_algos_tests.c	/^char* test_bubble_sort()$/;"	f
test_create	tests/list_tests.c	/^char *test_create()$/;"	f
test_destroy	tests/list_tests.c	/^char *test_destroy()$/;"	f
test_get_nth	tests/list_tests.c	/^char *test_get_nth()$/;"	f
test_insert_at_nth	tests/list_tests.c	/^char *test_insert_at_nth()$/;"	f
test_join_two_Lists	tests/list_tests.c	/^char *test_join_two_Lists()$/;"	f
test_merge_sort	tests/list_algos_tests.c	/^char* test_merge_sort()$/;"	f
test_push_pop	tests/list_tests.c	/^char *test_push_pop()$/;"	f
test_remove	tests/list_tests.c	/^char *test_remove()$/;"	f
test_shift	tests/list_tests.c	/^char *test_shift()$/;"	f
test_split_into_two_Lists	tests/list_tests.c	/^char *test_split_into_two_Lists()$/;"	f
test_unshift	tests/list_tests.c	/^char *test_unshift()$/;"	f
tests_run	tests/minunit.h	/^int tests_run;$/;"	v
th	ex33_vim.vim	/^nnoremap th :tabfirst$/;"	m
tj	ex33_vim.vim	/^nnoremap tj :tabprev$/;"	m
tk	ex33_vim.vim	/^nnoremap tk :tabnext$/;"	m
tl	ex33_vim.vim	/^nnoremap tl :tablast$/;"	m
tm	ex33_vim.vim	/^nnoremap tm :tabmove $/;"	m
tn	ex33_vim.vim	/^nnoremap tn :tabnew $/;"	m
value	src/lcthw/list.h	/^	void *value;$/;"	m	struct:ListNode
values	tests/list_algos_tests.c	/^char *values[] = { "XXXX", "1234", "abcd", "xjvef", "NDSS", };$/;"	v
zt	ex33_vim.vim	/^normal! zt$/;"	m
